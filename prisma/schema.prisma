// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique @map("session_token")
  expires      DateTime
  userId       String   @map("user_id") @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?   @unique
  email          String?   @unique
  emailVerified  DateTime? @map("email_vferified")
  image          String?
  hashedPassword String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  posts Post[]

  comments Comment[]

  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())

  authorName String
  author     User   @relation(fields: [authorName], references: [name])

  postSlug String
  post     Post   @relation(fields: [postSlug], references: [slug], onDelete: Cascade) //if the post has been deleted then all related comments will be so

  @@map("comments")
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  slug        String   @unique
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  image       String?
  description String
  title       String
  body        String
  featured    Boolean?

  author        String
  authorNameRel User   @relation(fields: [author], references: [name], onDelete: Cascade)

  categorySlug String
  category     Category  @relation(fields: [categorySlug], references: [slug])
  Comment      Comment[]

  @@map("posts")
}

model Category {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  slug     String  @unique
  title    String
  img      String?
  featured Boolean @default(false)
  Posts    Post[]
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
